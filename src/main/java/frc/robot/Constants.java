// RobotBuilder Version: 6.1
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package frc.robot;

import java.security.PublicKey;

import edu.wpi.first.cameraserver.CameraServer;
import edu.wpi.first.cscore.HttpCamera;
import edu.wpi.first.networktables.GenericEntry;
import edu.wpi.first.wpilibj.shuffleboard.BuiltInWidgets;
import edu.wpi.first.wpilibj.shuffleboard.Shuffleboard;
import edu.wpi.first.wpilibj.shuffleboard.ShuffleboardTab;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

/**
 * The Constants class provides a convenient place for teams to hold robot-wide
 * numerical or boolean
 * constants. This class should not be used for any other purpose. All constants
 * should be
 * declared globally (i.e. public static). Do not put anything functional in
 * this class.
 *
 * <p>
 * It is advised to statically import this class (or one of its inner classes)
 * wherever the
 * constants are needed, to reduce verbosity.
 */
public class Constants {
    public static final class Selector {
        public static final class DPAD {
            public static final int kUp = 0;
            public static final int kRight = 90;
            public static final int kDown = 180;
            public static final int kLeft = 270;
        }

        public static class PlacementSelector {

            private static boolean[][] array = new boolean[4][2];
            private static int currentRow = 0;
            private static int currentCol = 0;
            private static GenericEntry[][] array1 = new GenericEntry[4][2];
            public static String level = "blank";
            public static String left;
            public static String right;

            public PlacementSelector() {

                // Initially set the first element to true
                array[currentRow][currentCol] = true;
            }

            public static void move(int direction) {
                // Set the current true element to false
                array[currentRow][currentCol] = false;
                SmartDashboard.putBoolean(currentRow + "-" + currentCol, false);
                array1[currentRow][currentCol].setBoolean(false);

                if (direction == Constants.Selector.DPAD.kDown && currentRow > 0) {
                    currentRow--;
                } else if (direction == Constants.Selector.DPAD.kUp && currentRow < array.length - 1) {
                    currentRow++;
                } else if (direction == Constants.Selector.DPAD.kLeft && currentCol > 0) {
                    currentCol--;
                } else if (direction == Constants.Selector.DPAD.kRight && currentCol < array[0].length - 1) {
                    currentCol++;
                }

                // Set the new position to true
                array[currentRow][currentCol] = true;
                SmartDashboard.putBoolean(currentRow + "-" + currentCol, true);
                array1[currentRow][currentCol].setBoolean(true);
            }

            public static int getCurrentCol() {
                return currentCol;
            }

            public static int getCurrentRow() {
                return currentRow;
            }

            public static void initializeTab() {
                // Add placement selector to REEFSCAPE tab
                ShuffleboardTab mainTab = Shuffleboard.getTab("REEFSCAPE");
                for (int i = 0; i < array1.length; i++) {
                    for (int j = 0; j < array1[i].length; j++) {
                        array1[i][j] = mainTab.add(i + "-" + j, false).withWidget(BuiltInWidgets.kBooleanBox)
                                .withPosition(j, Math.abs(i - 3)).getEntry();
                    }
                }
                array1[currentRow][currentCol].setBoolean(true);

            }

            public static void printArray() {
                for (boolean[] row : array) {
                    for (boolean element : row) {
                        System.out.print(element + " ");
                    }
                    System.out.println();
                }
            }
        

            public static String getLevel(){
                if (getCurrentRow() == 0) level = "L1";
                else if (getCurrentRow() == 1) level = "L2";
                else if (getCurrentRow() == 2) level = "L3";
                else if (getCurrentRow() == 3) level = "L4";
                return level;
            }

            public static String getScoringPose(){
                String side = "blank";
                if (getCurrentCol() == 0)side = left;
                else if (getCurrentCol() == 1)side = right;
                return side;
            }

        }
    }
        
    

    public static final class SwerveConstants {
        public static final double percentSlow = 0.35;
    }

    public static final class ElevatorConstants {
        // stage 1 = 0
        // stage 1 = 5
        // stage 1 = 10
        // stage 2 = 0
        // stage 2 = 5
        // stage 2 = 10
        public static final class PID {
            //
            public static final double P = 2.4f;
            public static final int I = 0;
            public static final double D = 0.1f;
            //
            public static final int P2 = 60;
            public static final int I2 = 0;
            public static final int D2 = 6;
            //
        }
    
        public static final class Positions {
    
            //Stored
            public static final int lowerStored = 0;
            public static final int upperStored = 10;
    
            //L1
            public static final int lowerFirst = 0;
            public static final int upperFirst = 5;
    
            //L2
            public static final int lowerSecond = 0;
            public static final int upperSecond = 10;
    
            //L3
            public static final int lowerThird = 5;
            public static final int upperThird = 10;
    
            //L4
            public static final int lowerFourth = 10;
            public static final int upperFourth = 10;
    
            //Climb
            public static final int lowerClimb = -5;
            public static final int upperClimb = 0;
    
            //Ground Pickup
            public static final int lowerGround = 0;
            public static final int upperGround = 0;
            
            //Source Pickup
            // public static final int lowerSource = 0;
            // public static final int upperSource = 0;
    
            //Processor Place
            // public static final int lowerProcessor = 0;
            // public static final int upperProcessor = 0;
        }
    }

    public static final class ShoulderConstants {
        //
        public static final double P = 2.4f;
        public static final int I = 0;
        public static final double D = 0.1f;
        //
        public static final int P2 = 60;
        public static final int I2 = 0;
        public static final int D2 = 6;
        //
        public static final int PosReef4 = 180;
        public static final int PosReef123 = 270;
        public static final int PosStored = 30;
        public static final int PosStationPickup = 90;
        public static final int PosSeaBedPickup = 0;
        // pose for ground L1 L2 L3 processor = x
        // pose for feeder = x
        // pose for L4 = X
        // pose for auton stored = X
        // pose for feeder station = x
    }

    public static final class WristConstants {
        // pose upright = 0
        // pose flat = 90
        public static final class OldWristConstants {

            public static final double wristMotorGearRatio = 8; //X input rotations for each output rotation
        
            public static final double rotationVerticalAlligned = wristMotorGearRatio * 0.5;
            public static final double rotationHorizontalAlligned = wristMotorGearRatio * 0;
        }
    }

    public static final class ClawConstants {
    }

    public static final class VisionConstants {
        public static final String limeLightName = "limelight";
        public static final String limeLightName2 = "";
        public static final int aprilPipe = 0;
        // public static final int nPipe = 1;
    }

}